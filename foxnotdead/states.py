from . import commandsfrom . import itemsfrom peewee import *from . import connectionfrom . import usersclass UserStates(Model):    id = PrimaryKeyField(null=False)    user_id = IntegerField()    state_id = IntegerField()    class Meta:        database = connection.db        table_name = "user_states"class BaseState(Model):    id = PrimaryKeyField(null=False)    name = CharField(null=False)    caption = CharField(null=False)    reserved = BooleanField(null=False)    db_id = 0    commands = {        "i": commands.InfoCommand,        "u": commands.ViewInventory,    }    def get_caption(self):        return self.caption    @staticmethod    def get_states():        return {_.db_id: _ for _ in (            WalkState, AgressiveSpottedState, NotAgressiveSpottedState, BattleState, InitState, DeathState, WinState,            UseItemState        )}    @classmethod    def get_state(cls, id):  # from db and bind it        dbstate = BaseState.get(BaseState.id == id)        return dbstate._as(cls.get_states().get(dbstate.id, dbstate.__class__))    def process_input(self, user, input: str):        commands = self.get_commands(user)        command = commands.get(input)        if (command):            result = command.execute(user)            return result        else:            return None    def _as(self, _class):        self.__class__ = _class        return self    @classmethod    def get_self(cls):        pass    def get_commands(self, user):        from .commands import StateCommand        base_commands = BaseState.commands        db_commands = {_.action: _ for _ in StateCommand.select().where(StateCommand.state_id == self.id)}        return {**base_commands, **self.commands, **db_commands}    class Meta:        database = connection.db        table_name = "states"class UseItemState(BaseState):    caption = "Выбрать предмет"    db_id = 8    commands = {        "b": commands.BackCommand    }    def get_commands(self, user):        user_items = items.UserItems.get_user_items(user.id, only_usable=True)        _commands = {}        counter = 0        for _ in user_items:            _commands[str(counter)] = \                _i = commands.UseItemCommand.Init(_.items.id, _.items.name)            counter += 1        base_commands = {k: v for k, v in BaseState.commands.items() if v != commands.ViewInventory}        return {**base_commands, **UseItemState.commands, **_commands}class WalkState(BaseState):    caption = "Ночь. Улица. Фонарь. Аптека."    db_id = 1    commands = {        "w": commands.WalkCommand    }class BattleState(BaseState):    caption = "Бой"    class BattleBotState:        id = 0        state_id = 0        bot_id = 0    @classmethod    def Init(cls, user, bot):        pass    db_id = 2    commands = {        "k": commands.KickCommand,        "e": commands.InspectEnemyCommand,    }class NotAgressiveSpottedState(BaseState):    caption = "Замечен прохожий"    db_id = 3    commands = {        "r": commands.RunCommand,        "a": commands.AttackCommand,    }class AgressiveSpottedState(BaseState):    caption = "Замечен враг "    db_id = 4    commands = {        "r": commands.RunCommand,        "a": commands.AttackCommand,        "e": commands.InspectEnemyCommand,    }class InitState(BaseState):    db_id = 5class DeathState(BaseState):    caption = "Ты сдох"    db_id = 6    def get_commands(self, user):        return {"n": commands.NewGameCommand}    passclass WinState(BaseState):    caption = "Ты подебил"    db_id = 7    def get_commands(self, user):        return {"w": commands.WalkCommand}class DatabaseState(BaseState):    def get_db_commands(self, user):        pass    def get_commands(self, user):        base_commands = BaseState.commands        return {**base_commands, **self.commands}    pass